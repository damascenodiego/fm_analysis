/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. fconstraint.jj */
/*@egen*/options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(FCONSTRAINT)package br.usp.icmc.parser.reduction;

public class FCONSTRAINT/*@bgen(jjtree)*/implements FCONSTRAINTTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTFCONSTRAINTState jjtree = new JJTFCONSTRAINTState();

/*@egen*/
  public static void main(String args []) throws ParseException  {
    new FCONSTRAINT(System.in);
    while (true) {
      System.out.println("Reading from standard input...");     
      try {        SimpleNode root = FCONSTRAINT.Parse();        if(root == null) {			System.out.println("Goodbye.");			        }else {            root.dump("-");            //System.out.println(toString(prefix) + "(" + jjtGetValue()+ ")");        }        return;
      }
      catch (Exception e) {
        System.out.println("Erro sint\u00e1tico.");
        System.out.println(e.getMessage());
        FCONSTRAINT.ReInit(System.in);
      }
      catch (Error e) {
        System.out.println("Erro l\u00e9xico.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}PARSER_END(FCONSTRAINT)SKIP:
{ " " | "\r" | "\t" | "\n" }TOKEN: /* OPERATORS */{  <NEG: "!" >| <AND: "&" >| <OR: "||" >}

TOKEN:
{ <ID: (<LETTER>)+ >| <#LETTER: [ "_", "a"-"z", "A"-"Z" ]>
}SimpleNode Parse() :{/*@bgen(jjtree) Parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Parse */
  try {
/*@egen*/ term()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/			{return jjtn000;}| ";"/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/				{return null;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Object term(): 					{/*@bgen(jjtree) term */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTTERM);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Object i,a="",b="",c="";String z="";}{/*@bgen(jjtree) term */
  try {
/*@egen*/ i=unary()	((a=AND()| b=OR()) c=unary())*	{z=z.concat(""+i+a+b+c);}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/    {jjtn000.jjtSetValue(z);	return z;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Object unary(): 				{/*@bgen(jjtree) unary */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Object i,a,b;String z="";}{/*@bgen(jjtree) unary */
  try {
/*@egen*/ i=element()					{z=z.concat(i+"");}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{jjtn000.jjtSetValue(z);	return z;}| a=NEG() b=element()			{z=z.concat(a+""+b);}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/  	{jjtn000.jjtSetValue(z);	return z;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Object element(): 				{/*@bgen(jjtree) element */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Object i,t;String z="";}{/*@bgen(jjtree) element */
  try {
/*@egen*/ i=ID()						{z=z.concat(i+"");}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{jjtn000.jjtSetValue(z);	return z;}| "(" t=term() ")" 				{z=z.concat("("+t+")");}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/  	{jjtn000.jjtSetValue(z);	return z;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Object NEG()     :				{/*@bgen(jjtree) neg */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTNEG);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) neg */
   try {
/*@egen*/  t=<NEG>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}Object AND()     :				{/*@bgen(jjtree) and */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTAND);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) and */
   try {
/*@egen*/  t=<AND>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}Object OR()    :				{/*@bgen(jjtree) or */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTOR);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) or */
   try {
/*@egen*/  t=<OR>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}Object ID()    :				{/*@bgen(jjtree) id */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTID);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) id */
   try {
/*@egen*/  t=<ID>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}