/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package br.usp.icmc.parser;

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected FCONSTRAINT parser;
	String z3;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(FCONSTRAINT p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		return FCONSTRAINTTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		// System.out.println(toString(prefix));
		System.out.println(toString(prefix) + "(" + jjtGetValue() + ")");
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}
	
	public String getZ3() {		
		//System.out.println(toString(prefix) + " - " + jjtGetValue());
		String out = "";
		if (children != null) {
			String g = "";
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					g = g.concat(n.toString()+" ");		
				}
			}
			//System.out.println("->"+g);			
			if(g.indexOf("and")>0 || g.indexOf("or")>0){				
				int u = 0;					
				while(!g.equals("unary ")){
					SimpleNode n = (SimpleNode) children[u];
					String val = n.getZ3();										
					if(g.startsWith("unary and ")){
						out = out.concat("(and "+val+" ");	
						g = g.substring(g.indexOf("unary and ")+10, g.length());
					}else if(g.startsWith("unary or ")){
						out = out.concat("(or "+val+" ");
						g = g.substring(g.indexOf("unary or ")+9, g.length());
					}
					u = u+2;					
				}
				SimpleNode n = (SimpleNode) children[u];
				String val = n.getZ3();
				out = out.concat(val);
				for(int i=u; i>0; i=i-2){
					out = out.concat(")");
				}
				return out;
			}			
			if(g.equals("neg element ")){
				SimpleNode n = (SimpleNode) children[1];
				String val = n.getZ3();
				out = "(not "+val+")";				
			}
			if(g.equals("term ") || g.equals("unary ") || g.equals("element ")){				
				SimpleNode n = (SimpleNode) children[0];
				String val = n.getZ3();
				out = val;				
			}
			if(g.equals("id ")){				
				SimpleNode n = (SimpleNode) children[0];				
				out = ""+n.jjtGetValue();				
			}
			//System.out.println("-?"+out);
		}
		return out;
	}
}

/*
 * JavaCC - OriginalChecksum=9e4270390b7b07e6c5521b23672968f2 (do not edit this
 * line)
 */
